{"version":3,"file":"data.d.js","names":[],"sources":["../src/data.d.ts"],"sourcesContent":["import type React from 'react';\n\nexport type timestampRange = [number, number]\n\nexport type ContainerType = {\n  data: dataType[];\n  initDay?: number;\n  onChange?: (params: number) => void;\n  height?: number;\n  scheduleRender?: (props: {\n    data: dataType,\n    timestampRange: timestampRange,\n  }) => JSX.Element;\n  businessRender?: (timestamp: number) => React.ReactNode;\n  mode?: 'day' | 'week';\n  onSlideChange?: (currTimestamp: [number, number], data: dataType) => void;\n  isDraggable?: boolean;\n  rangeStartAndEndKey?: [string, string];\n};\n\nexport type dataType = {\n  startTime: number;\n  endTime: number;\n  [propsName: string]: any;\n};\n\nexport type WeekType = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n];\n\nexport type HourType = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n];\n\nexport type WeeklyOptionsType = {\n  dateTextList: WeekType | [];\n};\n\nexport type CalendarHeaderType = {\n  businessRender?: (timestamp: number) => React.ReactNode;\n};\n\nexport type DailyOptionsType = {\n  setCurrTime: React.Dispatch<number>;\n  dateTextList: WeekType | [];\n  onChangeWeek: (params: 'prevWeek' | 'nextWeek') => void;\n  setSwitchWeekendDay: React.Dispatch<'day' | 'week'>;\n};\n\nexport type ScheduleCantainerType = {\n  data?: dataType[];\n  scheduleRender?: ({\n    data: dataType,\n    timestampRange: timestampRange,\n  }) => JSX.Element;\n  onSlideChange?: (currTimestamp: [number, number], data: dataType) => void;\n  rangeStartAndEndKey?: [string, string];\n};\n\nexport type scheduleListType = {\n  timestampRange: [number, number];\n  dataItem: dataType[];\n};\n\nexport type ScheduleItemType = {\n  timestampRange: [number, number];\n  dataItem: dataType[];\n  scheduleRender?: ({\n    data: dataType,\n    timestampRange: timestampRange,\n  }) => JSX.Element;\n  width: number;\n  dataItemLength: number;\n  id: string;\n  setIsMoving: React.Dispatch<boolean>;\n  onSlideChange?: (currTimestamp: [number, number], data: dataType) => void;\n  setMovingTop: React.Dispatch<number>;\n  rangeStartAndEndKey?: [string, string];\n};\n"],"mappings":""}